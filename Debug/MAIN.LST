C51 COMPILER V9.00   MAIN                                                                  07/19/2016 09:17:37 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN MAIN.OBJ
COMPILER INVOKED BY: E:\Keil\C51\Bin\C51.exe MAIN.c DB OE INCDIR(E:\Keil\C51\INC;E:\Keil\C51\INC)

line level    source

   1          #include"STC12C5A.h"
   2          //#include"12864.c"
   3          #include"main.h"
   4          #include"st7565.c"
   5          
   6          void delay(uint t)
   7          {
   8   1              while(t--);
   9   1      }
  10          
  11          void delayMs(uint s)
  12          {
  13   1              uint i=0,j=0;
  14   1              for(i = s; i > 0;i--)
  15   1              {
  16   2                      for(j = 100;j > 0;j--);
  17   2              }
  18   1      }
  19          
  20          void Delay10ms(unsigned int c)
  21          {
  22   1          unsigned char a,b;
  23   1          for(;c>0;c--)
  24   1              for(b=38;b>0;b--)
  25   1                  for(a=130;a>0;a--);
  26   1      }
  27          
  28          void InitADC()
  29          {
  30   1              P1M0 = 0XF8;
  31   1              P1M1 = 0XF8;
  32   1          P1ASF = 0xF8;
  33   1      //              P1ASF = P13ASF;
  34   1          ADC_RES = 0;
  35   1              ADC_RESL = 0;
  36   1              AUXR1 = 0x00;
  37   1          ADC_CONTR = ADC_POWER | ADC_SPEEDHH | ADC_START | 0;
  38   1          delay(1100);                       //ADC power-on delay and Start A/D conversion
  39   1      }
  40          
  41          void Initzd1()
  42          {
  43   1              TMOD = 0X01;
  44   1              TH0 = (65536-50000)/256;
  45   1              TL0 = (65536-50000)%256;
  46   1              ET0 = 1;
  47   1              TR0 = 1;
  48   1      }
  49          
  50          /*----------------------------
  51          ADC interrupt service routine
  52          ----------------------------*/
  53          void adc_isr() interrupt 5 using 1
  54          {
  55   1          ADC_CONTR &= !ADC_FLAG;         //Clear ADC interrupt flag
C51 COMPILER V9.00   MAIN                                                                  07/19/2016 09:17:37 PAGE 2   

  56   1        //  adcres = ADC_RES<< 2;              //Get ADC high 8-bit result and Send to UART
  57   1      //      adcres += ADC_RESL;         //switch to next channel
  58   1      
  59   1          ADC_CONTR = ADC_POWER | ADC_SPEEDHH | ADC_START | 0;
  60   1      }
  61          
  62          uint adcres=0;
  63          uint adcNumber;
  64          float temp=0;
  65          
  66          void zd1() interrupt 1
  67          {
  68   1              TH0 = (65536-50000)/256;
  69   1              TL0 = (65536-50000)%256;
  70   1      //      number = ch-3;  
  71   1              adcres = ADC_RES;              //Get ADC high 8-bit result and Send to UART
  72   1              adcres *= 4;
  73   1              adcres += ADC_RESL;         //switch to next channel
  74   1              temp = adcres;
  75   1              adcNumber = ((temp*addo)*1000);
  76   1      }
  77          void main()
  78          {
  79   1              uchar i = 0;
  80   1              InitADC();
  81   1              Initzd1();
  82   1              EADC = 1;
  83   1              EA = 1;
  84   1              Lcd12864_Init();
  85   1              Lcd12864_ClearScreen(0x00);//清屏
  86   1              Lcd12864_Write16CnCHAR(0,0,0," welcome to Mlog ");
  87   1              Lcd12864_Write16CnCHAR(0,2,0,"输入电压: 5.7V");
  88   1              Lcd12864_Write16CnCHAR(0,4,0,"输出电压: 12.0V");
  89   1              Lcd12864_Write16CnCHAR(0,6,0,"输出功率: xxxx");
  90   1              
  91   1              while (1)
  92   1              {
  93   2                      lcd_putnumstr(72,6,0,adcNumber/1000);
  94   2                      Lcd12864_Write16CnCHAR(80,6,0,".");
  95   2                      lcd_putnumstr(88,6,0,adcNumber%1000/100);       
  96   2                      lcd_putnumstr(96,6,0,adcNumber%1000%100/10);    
  97   2                      lcd_putnumstr(104,6,0,adcNumber%1000%100%10);   
  98   2              }
  99   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1615    ----
   CONSTANT SIZE    =   1980    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      8      32
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)

C51 COMPILER V9.00   STC12C5ASPI                                                           07/21/2016 16:16:17 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE STC12C5ASPI
OBJECT MODULE PLACED IN STC12C5ASPI.OBJ
COMPILER INVOKED BY: E:\Keil\C51\Bin\C51.exe STC12C5ASPI.c DB OE INCDIR(E:\Keil\C51\INC;E:\Keil\C51\INC)

line level    source

   1          /*------------------------------------------------------------------*/
   2          /* --- STC MCU Limited ---------------------------------------------*/
   3          /* --- STC12C5Axx Series MCU SPI Demo(1 master and 1 slave) --------*/
   4          /*                单主单从   中断方式              */
   5          /* --- Mobile: (86)13922805190 -------------------------------------*/
   6          /* --- Fax: 86-0513-55012956,55012947,55012969 ---------------------*/
   7          /* --- Tel: 86-0513-55012928,55012929,55012966----------------------*/
   8          /* --- Web: www.STCMCU.com -----------------------------------------*/
   9          /* --- Web: www.GXWMCU.com -----------------------------------------*/
  10          /* If you want to use the program or the program referenced in the  */
  11          /* article, please specify in which data and procedures from STC    */
  12          /*------------------------------------------------------------------*/
  13          
  14          #include "reg51.h"
  15          #define MASTER                  //define:master undefine:slave
  16          #define FOSC        11059200L
  17          #define BAUD        (256 - FOSC / 32 / 115200)
  18          
  19          typedef unsigned char BYTE;
  20          typedef unsigned int WORD;
  21          typedef unsigned long DWORD;
  22          
  23          sfr  AUXR       =   0x8e;       //Auxiliary register
  24          
  25          sfr SPSTAT      =   0xcd;       //SPI status register
  26          #define SPIF        0x80        //SPSTAT.7
  27          #define WCOL        0x40        //SPSTAT.6
  28          sfr SPCTL       =   0xce;       //SPI control register
  29          #define SSIG        0x80        //SPCTL.7
  30          #define SPEN        0x40        //SPCTL.6
  31          #define DORD        0x20        //SPCTL.5
  32          #define MSTR        0x10        //SPCTL.4
  33          #define CPOL        0x08        //SPCTL.3
  34          #define CPHA        0x04        //SPCTL.2
  35          #define SPDHH       0x00        //CPU_CLK/4
  36          #define SPDH        0x01        //CPU_CLK/16
  37          #define SPDL        0x02        //CPU_CLK/64
  38          #define SPDLL       0x03        //CPU_CLK/128
  39          sfr SPDAT       =   0xcf;       //SPI data register
  40          sbit SPISS      =   P1^3;       //SPI slave select, connect to slave' SS(P1.4) pin
  41          
  42          sfr IE2         =   0xAF;       //interrupt enable rgister 2
  43          #define ESPI        0x02        //IE2.1
  44          
  45          void InitUart();
  46          void InitSPI();
  47          void SendUart(BYTE dat);        //send data to PC
  48          BYTE RecvUart();                //receive data from PC
  49          
  50          ///////////////////////////////////////////////////////////
  51          
  52          void main()
  53          {
  54   1          InitUart();                 //initial UART
  55   1          InitSPI();                  //initial SPI
C51 COMPILER V9.00   STC12C5ASPI                                                           07/21/2016 16:16:17 PAGE 2   

  56   1          IE2 |= ESPI;
  57   1          EA = 1;
  58   1      
  59   1          while (1)
  60   1          {
  61   2      #ifdef MASTER                   //for master (receive UART data from PC and send it to slave, in the meant
             -ime
  62   2                                      //            receive SPI data from slave and send it to PC)
  63   2              ACC = RecvUart();
  64   2              SPISS = 0;              //pull low slave SS
  65   2              SPDAT = ACC;            //trigger SPI send
  66   2      #endif
  67   2          }
  68   1      }
  69          
  70          ///////////////////////////////////////////////////////////
  71          
  72          void spi_isr() interrupt 9 using 1     //SPI interrupt routine 9 (004BH)
  73          {
  74   1          SPSTAT = SPIF | WCOL;       //clear SPI status
  75   1      #ifdef MASTER
  76   1          SPISS = 1;                  //push high slave SS
  77   1          SendUart(SPDAT);            //return received SPI data
  78   1      #else                           //for salve (receive SPI data from master and
                  SPDAT = SPDAT;              //           send previous SPI data to master)
              #endif
  81   1      }
  82          
  83          ///////////////////////////////////////////////////////////
  84          
  85          void InitUart()
  86          {
  87   1          SCON = 0x5a;                //set UART mode as 8-bit variable baudrate
  88   1          TMOD = 0x20;                //timer1 as 8-bit auto reload mode
  89   1          AUXR = 0x40;                //timer1 work at 1T mode
  90   1          TH1 = TL1 = BAUD;           //115200 bps
  91   1          TR1 = 1;
  92   1      }
  93          
  94          ///////////////////////////////////////////////////////////
  95          
  96          void InitSPI()
  97          {
  98   1          SPDAT = 0;                  //initial SPI data
  99   1          SPSTAT = SPIF | WCOL;       //clear SPI status
 100   1      #ifdef MASTER
 101   1          SPCTL = SPEN | MSTR;        //master mode
 102   1      #else
                  SPCTL = SPEN;               //slave mode
              #endif
 105   1      }
 106          
 107          ///////////////////////////////////////////////////////////
 108          
 109          void SendUart(BYTE dat)
 110          {
 111   1          while (!TI);                //wait pre-data sent
 112   1          TI = 0;                     //clear TI flag
 113   1          SBUF = dat;                 //send current data
 114   1      }
 115          
 116          ///////////////////////////////////////////////////////////
C51 COMPILER V9.00   STC12C5ASPI                                                           07/21/2016 16:16:17 PAGE 3   

 117          
 118          BYTE RecvUart()
 119          {
 120   1          while (!RI);                //wait receive complete
 121   1          RI = 0;                     //clear RI flag
 122   1          return SBUF;                //return receive data
 123   1      }
 124          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =     99    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
